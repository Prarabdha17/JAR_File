package com.demo.beans;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

public class DestinationHashGenerator {

    public static void main(String[] args) {
        // Step 1: Check for correct number of arguments
        if (args.length != 2) {
            System.out.println("Usage: java -jar <jar-file> <PRN number> <JSON file path>");
            return;
        }

        String prnNumber = args[0];
        String jsonFilePath = args[1];

        // Step 2: Parse the JSON file
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = null;
        try {
            rootNode = mapper.readTree(new File(jsonFilePath));
        } catch (IOException e) {
            System.out.println("Error reading JSON file: " + e.getMessage());
            return;
        }

        // Step 3: Find the value of the "destination" key
        String destinationValue = findDestinationValue(rootNode);
        if (destinationValue == null) {
            System.out.println("No destination key found in the JSON file.");
            return;
        }

        // Step 4: Generate a random 8-character alphanumeric string
        String randomString = generateRandomString(8);

        // Step 5: Calculate the MD5 hash of the concatenated string
        String concatenatedString = prnNumber + destinationValue + randomString;
        String hash = null;
        try {
            hash = calculateMD5Hash(concatenatedString);
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error calculating MD5 hash: " + e.getMessage());
            return;
        }

        // Step 6: Print the final output in the format <hash>;<random string>
        System.out.println(hash + ";" + randomString);
    }

    // Method to find the first occurrence of the "destination" key in the JSON structure
    public static String findDestinationValue(JsonNode node) {
        if (node.has("destination")) {
            return node.get("destination").asText();
        }
        for (JsonNode child : node) {
            if (child.isObject() || child.isArray()) {
                String result = findDestinationValue(child);
                if (result != null) {
                    return result;
                }
            }
        }
        return null;
    }

    // Method to generate a random alphanumeric string of the specified length
    public static String generateRandomString(int length) {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder result = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            result.append(characters.charAt(random.nextInt(characters.length())));
        }
        return result.toString();
    }

    // Method to calculate the MD5 hash of a given input string
    public static String calculateMD5Hash(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] messageDigest = md.digest(input.getBytes());

        StringBuilder sb = new StringBuilder();
        for (byte b : messageDigest) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}
